{"version":3,"sources":["StageOneInput.js","CodeRenamer.js","App.js","index.js"],"names":["StageOneInput","_ref","prepareAndValidateInput","setError","setCode","react_default","a","createElement","Fragment","placeholder","onClick","e","CodeRenamer","code","renameSymbol","_code","split","map","i","key","concat","id","content","target","previousSibling","value","parse","esrefactor","Context","rename","identify","prompt","console","error","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","_React$useState3","_React$useState4","href","CodeRenamer_CodeRenamer","StageOneInput_StageOneInput","ReactDOM","render","src_App_0","document","querySelector"],"mappings":"4NAEaA,EAAgB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,wBAAyBC,EAA5BF,EAA4BE,SAAUC,EAAtCH,EAAsCG,QAAtC,OAC5BC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,YAAUE,YAAW,mHAWrBJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS,SAAAC,GAAC,OAAIT,EAAwBS,EAAGR,EAAUC,KAA3D,kBCbWQ,EAAc,SAAAX,GAAqC,IAAlCY,EAAkCZ,EAAlCY,KAAMC,EAA4Bb,EAA5Ba,aAAcV,EAAcH,EAAdG,QACjD,OAAOS,EAAKE,MACVC,MAAM,IACNC,IACA,SAACN,EAAEO,GAAH,OAASb,EAAAC,EAAAC,cAAA,QAAMG,QAAS,kBAAMI,EAAaD,EAAMK,EAAGd,IAAUe,IAAG,QAAAC,OAAUF,GAAKG,GAAE,QAAAD,OAAUF,IAAMP,MCG/FT,EAA0B,SAAAD,EAAaE,EAAUC,GAAY,IAC5DkB,EAD4DrB,EAAhCsB,OACXC,gBAAgBC,MACvC,IACCC,gBAAMJ,GACL,MAAOX,GAER,YADAR,EAAS,4BAIVC,EAAQ,IAAIuB,IAAWC,QAAQN,KAG1BR,EAAe,SAACD,EAAMK,EAAGd,GAC9B,IACCA,EAAQ,IAAIuB,IAAWC,QAAQf,EAAKgB,OAAOhB,EAAKiB,SAASZ,GAAIa,OAAO,8BACnE,MAAMpB,GACPqB,QAAQC,MAAM,qBACd7B,EAAQS,KAsBKqB,EAlBH,WAAM,IAAAC,EACSC,IAAMC,SAAS,MADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACVF,EADUK,EAAA,GACHnC,EADGmC,EAAA,GAAAG,EAEOL,IAAMC,SAAS,MAFtBK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEV5B,EAFU6B,EAAA,GAEJtC,EAFIsC,EAAA,GAIhB,OACArC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,4CAAmCF,EAAAC,EAAAC,cAAA,KAAGoC,KAAK,sCAAR,mBAAnC,KAAqGtC,EAAAC,EAAAC,cAAA,KAAGoC,KAAK,iDAAR,UAArG,KACAtC,EAAAC,EAAAC,cAAA,oUAGE0B,EAAQ5B,EAAAC,EAAAC,cAAA,MAAIc,GAAG,SAASY,GAAc,GACtCpB,EAAOR,EAAAC,EAAAC,cAACqC,EAAD,CAAa/B,KAAMA,EAAMC,aAAcA,EAAcV,QAASA,IACtEC,EAAAC,EAAAC,cAACsC,EAAD,CAAe3C,wBAAyBA,EAAyBC,SAAUA,EAAUC,QAASA,MCpClG0C,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.63c2e2e2.chunk.js","sourcesContent":["import React from 'react';\n\nexport const StageOneInput = ({ prepareAndValidateInput, setError, setCode }) => (\n\t<>\n\t\t<textarea placeholder={`function a() {\n  let b = 1;\n  b = 2;\n  b = 3;\n}\n\nfunction b() {\n  let b = 3;\n  let c = b;\n  b = 4;\n}`} />\n\t\t<button onClick={e => prepareAndValidateInput(e, setError, setCode)}>Bulk rename!</button>\n\t</>\n);","import React from 'react';\n\nexport const CodeRenamer = ({ code, renameSymbol, setCode }) => {\n\treturn code._code\n\t\t.split('')\n\t\t.map(\n\t\t\t(e,i) => <span onClick={() => renameSymbol(code, i, setCode)} key={`code-${i}`} id={`code-${i}`}>{e}</span>\n\t\t)\n}","import React from 'react';\nimport './App.css';\n\nimport { parse } from 'esprima';\nimport esrefactor from 'esrefactor';\n\nimport { StageOneInput } from './StageOneInput';\nimport { CodeRenamer } from './CodeRenamer';\n\nconst prepareAndValidateInput = ({ target }, setError, setCode) => {\n\tconst content = target.previousSibling.value;\n\ttry {\n\t\tparse(content);\n\t} catch (e) {\n\t\tsetError(\"Invalid JavaScript code.\");\n\t\treturn;\n\t}\n\n\tsetCode(new esrefactor.Context(content));\n}\n\nconst renameSymbol = (code, i, setCode) => {\n\ttry {\n\t\tsetCode(new esrefactor.Context(code.rename(code.identify(i), prompt(\"New name for variable: \"))));\n\t} catch(e) {\n\t\tconsole.error(\"Invalid renaming.\");\n\t\tsetCode(code);\n\t}\n}\n\nconst App = () => {\n\tconst [error, setError] = React.useState(null);\n\tconst [code, setCode] = React.useState(null); // this is where we will store the code\n\n  return (\n\t\t<>\n\t\t\t<h1>Bulk renamer for JavaScript by <a href=\"https://twitter.com/otterinjection\">@otterinjection</a> [<a href=\"https://github.com/fredrikaugust/bulk-renamer\">source</a>]</h1>\n\t\t\t<p>How does one use this tool? Insert some JS, click the \"Bulk Rename\" button, and when prompted with your parsed code,\n\t\t\tyou want to click the variable you wish to rename. You will then be presented with a dialog box asking you for your new\n\t\t\tvariable name. Simply enter it, and press enter, and voilla, you're done.</p>\n\t\t\t{ error ? <h5 id=\"error\">{error}</h5> : '' }\n\t\t\t{\tcode ? <CodeRenamer code={code} renameSymbol={renameSymbol} setCode={setCode} /> :\n\t\t\t\t<StageOneInput prepareAndValidateInput={prepareAndValidateInput} setError={setError} setCode={setCode} />\n\t\t\t}\n\t\t</>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}